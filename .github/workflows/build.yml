name: Build
on: push

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux GCC
            os: ubuntu-24.04
            cmake_flags: '-D CMAKE_C_COMPILER=gcc-14 -D CMAKE_CXX_COMPILER=g++-14 -D CMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer" -D CMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined"'

          - name: Linux Clang
            os: ubuntu-24.04
            cmake_flags: '-D CMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer" -D CMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined"'

          - name: macOS
            os: macos-15
            cmake_flags: ""

          - name: Windows Clang
            os: windows-2025
            cmake_flags: ''

          - name: Windows MSVC
            os: windows-2025
            cmake_flags: '-D CMAKE_CXX_FLAGS="/EHsc"'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Visual Studio shell
        if: matrix.name == 'Windows MSVC'
        uses: egor-tensin/vs-shell@v2

      - name: Set up Clang
        if: (matrix.name == 'Linux Clang') || (matrix.name == 'Windows Clang')
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: CMake configure
        run: cmake -S . -B build -G "Ninja Multi-Config" -D CMAKE_UNITY_BUILD=ON ${{ matrix.cmake_flags }}

      - name: CMake build -- Debug
        run: cmake --build build --config Debug

      - name: CTest -- Debug
        run: ctest --test-dir build -C Debug --output-on-failure

      - name: CMake build -- Release
        run: cmake --build build --config Release

      - name: CTest -- Release
        run: ctest --test-dir build -C Release --output-on-failure
